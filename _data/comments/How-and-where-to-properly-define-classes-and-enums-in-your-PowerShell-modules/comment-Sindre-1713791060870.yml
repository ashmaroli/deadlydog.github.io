_id: d52a9c60-00a8-11ef-ab1f-7f38f19dce58
message: "I had a framework in place that required me to continue using Import-Module so I made another workaround:\r\n\r\n```\r\nfunction Import-Enums {\r\n    <#\r\n    .SYNOPSIS\r\n        Imports enums from files and converts them into C# enums for use in PowerShell.\r\n\r\n    .DESCRIPTION\r\n        The Import-Enums function reads .enum files from a specified directory, converts\r\n        the enum definitions from PowerShell to C# format, and adds them to the current\r\n        session. This allows for the use of strongly-typed enums in PowerShell scripts.\r\n\r\n    .PARAMETER EnumsFolderPath\r\n        Specifies the path to the directory containing .enum files. Each file should\r\n        contain a PowerShell enum definition.\r\n\r\n        Enum files must be formatted with ; as linebreak. Powershell does not require this\r\n        but the convertion to CSharp public enum will break if it's not defined with ; which is\r\n        replaced by ,.\r\n\r\n    .EXAMPLE\r\n        Import-Enums -EnumsFolderPath \"C:\\MyModules\\Enums\"\r\n\r\n        This example imports all .enum files from the specified directory, converts them\r\n        to C# enums, and defines them in the current PowerShell session.\r\n\r\n    .INPUTS\r\n    String\r\n        You can pipe a string that specifies the path to the directory.\r\n\r\n    .OUTPUTS\r\n    None\r\n        This function does not produce any output. It defines enums in the current session.\r\n\r\n    .NOTES\r\n        This function uses the Add-Type cmdlet to compile enums defined in C#. Any errors\r\n        in enum definition or compilation will result in an exception.\r\n\r\n    #>\r\n    [CmdletBinding()]\r\n    param (\r\n        [Parameter(Mandatory=$True, ValueFromPipeline=$True)]\r\n        [string] $EnumsFolderPath\r\n    )\r\n\r\n    # Ensure the path exists\r\n    if (-Not (Test-Path $EnumsFolderPath)) {\r\n        Throw \"Enums folder path does not exist: $EnumsFolderPath\"\r\n    }\r\n\r\n    # Get all enum definition files\r\n    $enumFiles = Get-ChildItem -Path $EnumsFolderPath -Filter \"*.enum\"\r\n\r\n    foreach ($file in $enumFiles) {\r\n        # Read the file content\r\n        $enumContent = (Get-Content -Path $file.FullName -Raw)\r\n\r\n        # Convert the enum definition to C# format\r\n        $csharpEnumDefinition = ($enumContent -replace 'enum(.*)', 'public enum$1').Replace(\";\",\",\")\r\n\r\n        # Define the enum using Add-Type\r\n        try {\r\n            Add-Type -TypeDefinition $csharpEnumDefinition -Language CSharp\r\n        }\r\n        catch {\r\n            Throw \"Failed to load enum from $($file.Name): $_\"\r\n        }\r\n    }\r\n}\r\n```\r\nI used this as a Private function in the module and simply\r\n\r\n```Import-Enums -EnumsFolderPath \"$PSScriptRoot\\Enums\" in the .psm1.```\r\n\r\nPlaced my .enum's in a folder called Enums.\r\n\r\nWorks well."
name: Sindre
email: 309756b264441f463b7dcedff9056da4
url: ''
hidden: ''
date: '2024-04-22T13:04:20.866Z'
