_id: ca8d6560-8a00-11ec-8750-efca5f114d3c
message: "Great writeup/tutorial Daniel.\r\n\r\nOne quandary I had was in regards to the prerelease version.\r\n\r\nIf I'm understanding correctly, `Revision` will continue to update even on subsequent commits to the non-main (ex: feature) branch.\r\n\r\nFor example the following git \"actions\" will produce the following versions:\r\n\r\n| Git Action | Version |\r\n| --- | --- |\r\n| Commit on bugfix/foobar | 1.1.1-ci-20210209T120000-abc123 |\r\n| Commit on bugfix/foobar | 1.1.2-ci-20210209T120500-xyz456 |\r\n| Merge bugfix/foobar into main | 1.1.3 |\r\n| Commit on bugfix/fizzbuzz | 1.1.4-ci-20210209T120000-abc123 |\r\n| Merge bugfix/fizzbuzz into main | 1.1.5 |\r\n\r\nIn this case you would have the following stable versions: `1.1.0`, `1.1.3`, `1.1.5`.\r\n\r\nWhat would be ideal is something akin to the following:\r\n\r\n| Git Action | Version |\r\n| --- | --- |\r\n| Commit on bugfix/foobar | 1.1.1-ci-20210209T120000-abc123 |\r\n| Commit on bugfix/foobar | 1.1.1-ci-20210209T120500-xyz456 |\r\n| Merge feature/foobar into main | 1.1.1 |\r\n| Commit on bugfix/fizzbuzz | 1.1.2-ci-20210210T120000-abc123 |\r\n| Merge feature/foobar into main | 1.1.2 |\r\n\r\nIn this case you would have the following stable versions: `1.1.0`, `1.1.1`, `1.1.2`.\r\n\r\nFurthermore, the prerelease versions are a lower precedence as per the SemVer 2.0.0 rules:\r\n\r\n```\r\n1.1.1-ci-20210209T120000-abc123 < 1.1.1-ci-20210209T120500-xyz456 < 1.1.1\r\n```\r\n\r\nPerhaps what I would like cannot be supported using purely ADO (I get the feeling something like GitVersion is required based on some preliminary research).\r\n\r\nI'm curious how you feel about my proposed versioning scheme. Does it make sense?"
name: Kyle
email: 73107e74e06039ddaed20f4e78eb0ad1
url: ''
hidden: ''
date: '2022-02-09T23:34:15.069Z'
